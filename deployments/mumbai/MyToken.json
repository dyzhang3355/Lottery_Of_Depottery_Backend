{
  "address": "0x674C355E04e4e357d9F03C0Bde71F0c19A35b5A9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "adminCancelGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[6]",
          "name": "newNums",
          "type": "uint8[6]"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "changeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "doCharityDonation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "draw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameOngoing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameRound",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExpectedPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameRound",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameStatus",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInvestedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayerNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint8[6]",
          "name": "",
          "type": "uint8[6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrizePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTicketPrice",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinningNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint8[6]",
          "name": "",
          "type": "uint8[6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "manuallyInvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "manuallyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerCancelTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerNum",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizePercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "newPercent",
          "type": "uint8"
        }
      ],
      "name": "setPrizePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newPrice",
          "type": "uint32"
        }
      ],
      "name": "setTicketPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ticketOrders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isClaimed",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "playerGameRound",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winnerList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winningNums",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd160b482beddc7c7707c2a78d923e49c046cb74bcd4fdf4a79f95eaeb01444aa",
  "receipt": {
    "to": null,
    "from": "0x160444d4EbC1fb08A7935787886F319e2cd7127A",
    "contractAddress": "0x674C355E04e4e357d9F03C0Bde71F0c19A35b5A9",
    "transactionIndex": 3,
    "gasUsed": "4764893",
    "logsBloom": "0x
    "blockHash": "0x8859eb9c9eeed1799e6334d769bce1b0db436f1e106e2b59e561846c576ff845",
    "transactionHash": "0xd160b482beddc7c7707c2a78d923e49c046cb74bcd4fdf4a79f95eaeb01444aa",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 34546546,
        "transactionHash": "0xd160b482beddc7c7707c2a78d923e49c046cb74bcd4fdf4a79f95eaeb01444aa",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000160444d4ebc1fb08a7935787886f319e2cd7127a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000196477a7fc93000000000000000000000000000000000000000000000000000443206ad15c730800000000000000000000000000000000000000000000301681b0d4cd24850e140000000000000000000000000000000000000000000000000429bbf3295fe00800000000000000000000000000000000000000000000301681ca3944cc81a114",
        "logIndex": 12,
        "blockHash": "0x8859eb9c9eeed1799e6334d769bce1b0db436f1e106e2b59e561846c576ff845"
      }
    ],
    "blockNumber": 34546546,
    "cumulativeGasUsed": "5135976",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "5566241bc56189c05f945bb61ff82be3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"adminCancelGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[6]\",\"name\":\"newNums\",\"type\":\"uint8[6]\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doCharityDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameOngoing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameRound\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameRound\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameStatus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint8[6]\",\"name\":\"\",\"type\":\"uint8[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrizePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketPrice\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinningNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint8[6]\",\"name\":\"\",\"type\":\"uint8[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manuallyInvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manuallyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerCancelTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerNum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newPercent\",\"type\":\"uint8\"}],\"name\":\"setPrizePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newPrice\",\"type\":\"uint32\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketOrders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"playerGameRound\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winningNums\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MyToken.sol\":\"MyToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/MyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// The line above is recommended and let you define the license of your contract\\n// Solidity files have to start with this pragma.\\n// It will be used by the Solidity compiler to validate its version.\\npragma solidity ^0.8.17;\\n\\n//import \\\"hardhat/console.sol\\\"; // fix for conflict with forge-std/Test.sol in tests.\\n\\n// This is the main building block for smart contracts.\\nimport \\\"./PoolWithHigherInterest.sol\\\";\\n\\ncontract MyToken {\\n\\n    struct User {\\n\\t    uint balance;\\n        uint lastUpdateTime;\\n        uint interestRate;\\n        string name;\\n} \\n\\n    mapping (address => User) public users;\\n    address payable admin;\\n    uint public totalInterest;\\n    uint public lastUpdate;\\n    uint public interestRate;\\n    uint public investedAmount;\\n    PoolWithHigherInterest pool;\\n\\n    //constructor(address investmentAddress) {\\n    constructor() {\\n        admin = payable(msg.sender);\\n        totalInterest = 0;\\n        lastUpdate = block.timestamp;\\n        interestRate = 2;\\n        investedAmount = 0;\\n        //Changed. pool = PoolWithHigherInterest(investmentAddress);\\n        pool = PoolWithHigherInterest(0x4070C76A1635eCd0538388F8948806420814e1d0);\\n        pool.register(\\\"KK\\\");\\n        gameRound = 1;            // increase by 1 every time when a game is finished.\\n        ticketPrice = 500000 wei; // about one US dollar.\\n        prizePercentage = 70;     // 70% of the balance in pool is used for the Prize.\\n        gameOngoing = false;      // true: the game is ongoing. false: game is paused/cancelled.\\n        for (uint8 i = 0; i < 6; i++) {\\n            winningNums[i] = 0;   // set the initial winning number as 0.\\n        }\\n    }\\n\\n    modifier onlyOwner{\\n        require(msg.sender == admin, \\\"can only be called by the owner\\\");\\n        _;\\n    }\\n\\n    modifier isRegistered() {\\n        require(users[msg.sender].lastUpdateTime > 0, \\\"This user is not registered\\\");\\n        _;\\n    }\\n\\n    function getBalance() public view isRegistered returns (uint) {\\n        return users[msg.sender].balance + calculateInterest(msg.sender);\\n    }\\n\\n    function getUserInterestRate(address user) public view isRegistered returns (uint) {\\n        require(msg.sender == admin || msg.sender == user, \\\"You can not get other people's inerestRate.\\\");\\n        return users[user].interestRate;\\n    }\\n\\n    function getFunds() public view onlyOwner returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    function getInterestRate() public view onlyOwner returns (uint) {\\n        return interestRate;\\n    }\\n\\n    function getInvestedAmount() public view onlyOwner returns (uint){\\n        return investedAmount;\\n    }\\n\\n    function changeRate(uint newRate) external onlyOwner{\\n        interestRate = newRate;\\n    }\\n\\n    function manuallyInvest(uint amount) public onlyOwner{\\n        require(amount > pool.getLowestDepositAmount(), \\\"Deposit amount can not be less than lowestDepositAmount\\\");\\n\\n        investInAnotherPool(amount);\\n    }\\n\\n    function manuallyWithdraw(uint amount) public onlyOwner{\\n        require(investedAmount >= amount, \\\"Don't have enough amount to withdraw\\\");\\n\\n        withdrawFromAnotherPool(amount);\\n    }\\n\\n    function register(string memory name) public {\\n        require(users[msg.sender].lastUpdateTime == 0, \\\"This user is already registered\\\");\\n        require((bytes(name)).length != 0, \\\"Name is not provided\\\");\\n        User memory user = User({\\n                balance: 0,\\n                lastUpdateTime: block.timestamp,\\n                interestRate: interestRate,\\n                name: name\\n            });\\n        users[msg.sender] = user;\\n    }\\n\\n    function deposit() external isRegistered payable  {\\n        require(msg.value > 0, \\\"Deposit amount can not be zero\\\");\\n\\n        updateBalance(msg.sender);\\n        \\n        users[msg.sender].balance += msg.value;\\n        users[msg.sender].lastUpdateTime = block.timestamp;\\n        if(address(this).balance > pool.getLowestDepositAmount()){\\n            investedAmount += address(this).balance;\\n            investInAnotherPool(address(this).balance);\\n        }\\n    }\\n\\n    function withdraw(uint amount) external isRegistered {\\n        require(amount > 0, \\\"Withdrawal amount must be greater than zero\\\");\\n        updateBalance(msg.sender);\\n        require(users[msg.sender].balance >= amount, \\\"Insufficient balance\\\");\\n\\n        if(address(this).balance < amount){\\n            investedAmount -= amount - address(this).balance;\\n            withdrawFromAnotherPool(amount - address(this).balance);\\n        }\\n\\n        users[msg.sender].balance -= amount;\\n        users[msg.sender].lastUpdateTime = block.timestamp;\\n        require(address(this).balance > amount, \\\"not enough\\\");\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n    }\\n\\n    function investInAnotherPool(uint amount) internal{\\n        pool.deposit{value: amount}();\\n        lastUpdate = block.timestamp;\\n    } \\n\\n    function withdrawFromAnotherPool(uint amount) internal{\\n        pool.withdraw(amount);\\n        lastUpdate = block.timestamp;\\n    }\\n\\n    function updateBalance(address user)internal{\\n        uint interest = calculateInterest(user);\\n        lastUpdate = block.timestamp;\\n        totalInterest += interest;\\n        users[user].balance += interest;\\n        users[user].lastUpdateTime = block.timestamp;\\n    }\\n\\n    function calculateInterest(address user) internal view returns(uint){\\n        uint timePassed = block.timestamp - users[user].lastUpdateTime;\\n        uint interest = (users[user].balance * interestRate * timePassed) / (365 days * 100);\\n        return interest;\\n    }\\n\\n    bool      public  gameOngoing;\\n\\n    // admin side.\\n    uint32    public  ticketPrice;\\n    uint8     public  prizePercentage; // ranging from 1~90.\\n    uint32    public  gameRound;\\n    uint8[6]  public  winningNums;     // The 6 winning numbers in a game. Each should be between 1~49, inclusive.\\n\\n    // player side.\\n    uint32    public  playerNum;       // The number of players. This is to loop through mapping 'ticketOrders'.\\n    address[] public  playerList;\\n    address[] public  winnerList;\\n    mapping(address => LotteryTicket) public ticketOrders;\\n    //mapping(uint32 => uint8[6]) public winningNumbers; // winning numbers records. The key is the round number, while the value (uint8[6]) is the corresponding winning number.\\n\\n    struct LotteryTicket {\\n        //TODO: bring back. uint32 ticketCnt; // the number of tickets a player buys in a game. This is to loop through all the tickets one buys.\\n        //TODO: bring back. uint8[][6] playerLotteryNums;  // a player can buy multiple tickets in a game.\\n        bool   isValid;              // true: player's ticket is valid. Otherwise, invalid.\\n        bool   isClaimed;\\n        uint32 playerGameRound;      // the latest game round that a player is in.\\n        uint8[6] playerLotteryNums;  // a player can buy multiple tickets in a game.\\n    }\\n\\n    mapping(address => uint256) balances;\\n\\n    modifier onlyAdmin () { // only admin can enable/pause/cancel a game and change the ticket price and prize percentage.\\n        require(msg.sender == admin, \\\"Only the contract admin can call this function.\\\");\\n        _;\\n    }\\n\\n    modifier gameIsOngoing () { // only admin can enable/pause/cancel a game and change the ticket price and prize percentage.\\n        require(gameOngoing == true, \\\"Game is not ongoing.\\\");\\n        _;\\n    }\\n\\n    modifier onlyValidTicket () { // a player needs a valid ticket to claim a prize or cancel a ticket.\\n        require(ticketOrders[msg.sender].isValid == true, \\\"The ticket is invalid and thus cannot proceed.\\\");\\n        _;\\n    }\\n\\n    modifier onlyOneTicket () { // a player is allowed to buy at msot one ticket in a game. This limit may be removed later. // test_08 fix.\\n        require((ticketOrders[msg.sender].isValid == false) || (ticketOrders[msg.sender].playerGameRound != gameRound), \\\"Only one ticket at most in a game round.\\\");\\n        _;\\n    }\\n\\n    modifier hasPlayers () { // a player is allowed to buy at msot one ticket in a game. This limit may be removed later. // test_08 fix.\\n        require(playerNum > 0, \\\"There should be at least one player in a game.\\\");\\n        _;\\n    }\\n\\n    function setTicketPrice(uint32 newPrice) onlyAdmin external {\\n        require(newPrice > 0, \\\"The new ticket price should be larger than 0.\\\");\\n        ticketPrice = newPrice;\\n    }\\n\\n    function setPrizePercentage(uint8 newPercent) onlyAdmin external {\\n        require((newPercent > 0) && (newPercent <= 90), \\\"The new percentage should be > 0 and <= 90.\\\");\\n        prizePercentage = newPercent;\\n    }\\n\\n    function enableGame() onlyAdmin external {\\n        gameOngoing = true;\\n    }\\n    function pauseGame() onlyAdmin external {\\n        gameOngoing = false;\\n    }\\n\\n    // A game can only be cancelled (to prevent any new player from buying tickets) when it has been paused to avoid any synchronization issue.\\n    function adminCancelGame() external {\\n        require(gameOngoing == false, \\\"Please pause the game before cancelling it.\\\");\\n        // return ticket fees back to players if a game is cancelled.\\n        for (uint32 i = 0; i < playerNum; i++) {\\n            if (ticketOrders[playerList[i]].playerGameRound == gameRound) { // make sure that a player has joined the latest game before refunding.\\n                payable(playerList[i]).transfer(ticketPrice);\\n            }\\n        }\\n    }\\n\\n    // Player side.\\n    function buyTicket(uint8[6] memory newNums) gameIsOngoing onlyOneTicket external payable { // test_04 fix.\\n        require(msg.value == ticketPrice, \\\"Incorrect paid Ethers, check the price by function getTicketPrice and try again.\\\");\\n        bool hasDuplicate = false;\\n        for (uint8 i = 0; i < 5; i++) {\\n            for (uint8 j = (i + 1); j < 6; j++) {\\n                if (newNums[i] == newNums[j]) {\\n                    hasDuplicate = true;\\n                }\\n            }\\n        }\\n        require(hasDuplicate == false, \\\"No duplicate numbers are allowed.\\\");\\n\\n        // numbers should be between 1~49. // issue_1 fix.\\n        bool validNums = true;\\n        for (uint8 i = 0; i < 6; i++) {\\n            if (newNums[i] < 1 || newNums[i] > 49) {\\n                validNums = false;\\n            }\\n        }\\n        require(validNums == true, \\\"All selected numbers should be between 1~49, inclusive.\\\");\\n\\n        ticketOrders[msg.sender].playerGameRound = gameRound;\\n        ticketOrders[msg.sender].isValid = true;\\n        ticketOrders[msg.sender].isClaimed = false;\\n        for (uint8 i = 0; i < newNums.length; i++) {\\n            ticketOrders[msg.sender].playerLotteryNums[i] = newNums[i];\\n        }\\n\\n        playerList.push(msg.sender);\\n        //playerList[playerNum] = msg.sender;\\n        playerNum += 1;  \\n    }\\n\\n    function playerCancelTicket() onlyValidTicket external {\\n        ticketOrders[msg.sender].isValid = false;\\n        payable(msg.sender).transfer(ticketPrice);\\n    }\\n\\n    function draw() onlyAdmin hasPlayers external {\\n        gameOngoing = false; // disable game to prevent any player from buying a ticket after the winning numbers are generated.\\n        winningNums = generateNumbers();\\n\\n        //address[] memory winnerList;\\n        // check winners and get the total number of winners.\\n        for (uint32 i = 0; i < playerNum; i++) {\\n            if ((ticketOrders[playerList[i]].playerGameRound == gameRound) && (ticketOrders[playerList[i]].isValid == true)) { // make sure that a player has joined the latest game and has not cancelled. // issue_3 fix.\\n                bool isWinner = checkWinner(ticketOrders[playerList[i]].playerLotteryNums, winningNums);\\n                if (isWinner) {\\n                    winnerList.push(playerList[i]);\\n                }\\n                //payable(playerList[i]).transfer(ticketPrice); // issue_4 fix by removing this line.\\n            }\\n            // newly added\\n            ticketOrders[playerList[i]].isValid = false; // set tickets are invalid after drawing and filtering winners.\\n        }\\n\\n        // divide the prize and transfer.\\n        if (winnerList.length > 0) {\\n            uint256 winnerPrize =  (address(this).balance * prizePercentage / (100 *winnerList.length)); // issue_2 fix.\\n            for (uint32 i = 0; i < winnerList.length; i++) {\\n                require(ticketOrders[winnerList[i]].isClaimed == false, \\\"Winner has already claimed the prize.\\\");\\n                ticketOrders[winnerList[i]].isClaimed = true;\\n                payable(winnerList[i]).transfer(winnerPrize);\\n            }\\n        }\\n\\n        // prepare for the next game.\\n        gameRound += 1;\\n        playerNum = 0;\\n        delete playerList;\\n        delete winnerList;\\n    }\\n\\n    function getWinningNumber() external view returns (uint32, uint8[6] memory) {\\n        return  (gameRound - 1, winningNums); // gameRound needs to minus 1 because it is increased every time a round of winning nubmers is generated.\\n    }\\n\\n    // for players to check their own number and corresponding game round in case they forgot them.\\n    function getPlayerNumber() external view returns (uint32, uint8[6] memory) {\\n        return (ticketOrders[msg.sender].playerGameRound, ticketOrders[msg.sender].playerLotteryNums);\\n    }\\n\\n    // for players to check the ticket price before buying a ticket.\\n    function getTicketPrice() external view returns (uint32) {\\n        return ticketPrice;\\n    }\\n\\n    // for players to check the total money in the pool before buying a ticket.\\n    function getPoolBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    // for players to check the expected prize before buying a ticket.\\n    function getExpectedPrize() external view returns (uint256) {\\n        return (address(this).balance * prizePercentage / 100); // default 70%.\\n    }\\n    // Newly Added\\n    function getPrizePercentage() external view returns (uint256) {\\n        //return (prizePercentage / 100); // default 70%.\\n        return prizePercentage; // default 70%.\\n    }\\n\\n    // Newly Added\\n    function getGameRound() external view returns (uint32) {\\n        return gameRound;\\n    }\\n\\n    // Newly Added\\n    function getGameStatus() external view returns (string memory) {\\n        string memory gameStatus = gameOngoing ? \\\"Ongoing\\\" : \\\"Paused/Cancelled\\\";\\n        return gameStatus;\\n    }\\n\\n    // for admin to donate money to charitable organization.\\n    // This is the main purpose of this lottery game.\\n    function doCharityDonation() onlyAdmin external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function generateNumbers() private view returns(uint8[6] memory) {\\n        uint8[6] memory numbers;\\n        uint randomNumber = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender)));\\n        \\n        for(uint8 i=0; i<6; i++) {\\n            uint8 number = uint8(randomNumber % 49) + 1;\\n            while(numberExists(numbers, number)) {\\n                randomNumber = uint(keccak256(abi.encodePacked(randomNumber)));\\n                number = uint8(randomNumber % 49) + 1;\\n            }\\n            numbers[i] = number;\\n            randomNumber = uint(keccak256(abi.encodePacked(randomNumber)));\\n        }\\n        \\n        return numbers;\\n    }\\n    \\n    function numberExists(uint8[6] memory array, uint8 number) private pure returns(bool) {\\n        for(uint8 i=0; i<array.length; i++) {\\n            if(array[i] == number) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function checkWinner(uint8[6] memory playerNums, uint8[6] memory winnerNums) private pure returns(bool) {\\n        require(playerNums.length == winnerNums.length, \\\"Player number length should be equal to winner number length.\\\");\\n        bool isWinner = true;\\n        for(uint8 i =0; i < winnerNums.length; i++) {\\n            if (playerNums[i] != winnerNums[i]) {\\n                isWinner = false;\\n                break;\\n            }\\n        }\\n        return isWinner;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5ecfce390bbaffc00202e95fef5c14b6493381441080f0e0a9972aff8c7c9f32\",\"license\":\"MIT\"},\"src/PoolWithHigherInterest.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.2 <0.9.0;\\n\\ncontract PoolWithHigherInterest {\\n\\n    struct User {\\n\\t    uint balance;\\n        uint lastUpdateTime;\\n        string name;\\n} \\n\\n    event Refund(address customer);\\n\\n    mapping (address => User) public users;\\n    address payable admin;\\n    uint public funds;\\n    uint public totalInterest;\\n    uint public lastUpdate;\\n    uint public interestRate;\\n    uint public investedAmount;\\n    uint public lowestDepositAmount;\\n\\n    constructor() {\\n        admin = payable(msg.sender);\\n        funds = 0;\\n        totalInterest = 0;\\n        lastUpdate = block.timestamp;\\n        interestRate = 4;\\n        investedAmount = 0;\\n        lowestDepositAmount = 3*(10**18);\\n    }\\n\\n    modifier onlyOwner{\\n        require(msg.sender == admin, \\\"can only be called by the owner\\\");\\n        _;\\n    }\\n\\n    modifier isRegistered() {\\n        require(users[msg.sender].lastUpdateTime > 0, \\\"This user is not registered\\\");\\n        _;\\n    }\\n\\n    function getBalance() public view isRegistered returns (uint) {\\n        return users[msg.sender].balance + calculateInterest(msg.sender);\\n    }\\n\\n    function getLowestDepositAmount() public view returns (uint) {\\n        return lowestDepositAmount;\\n    }\\n\\n    function getInterestRate() public view onlyOwner returns (uint) {\\n        return interestRate;\\n    }\\n\\n    function getFunds() public view onlyOwner returns (uint) {\\n        return funds;\\n    }\\n\\n    function getInvestedAmount() public view onlyOwner returns (uint){\\n        return investedAmount;\\n    }\\n\\n    function changeRate(uint newRate) external onlyOwner{\\n        interestRate = newRate;\\n    }\\n\\n    function changeLowestDepositAmount(uint value)external onlyOwner{\\n        lowestDepositAmount = value;\\n    }\\n\\n    function register(string memory name) public {\\n        require((bytes(name)).length != 0, \\\"Name is not provided\\\");\\n        User memory user = User({\\n                balance: 0,\\n                lastUpdateTime: block.timestamp,\\n                name: name\\n            });\\n        users[msg.sender] = user;\\n    }\\n\\n    function deposit() external isRegistered payable  {\\n        require(msg.value >= lowestDepositAmount, \\\"Deposit amount can not be less than lowestDepositAmount\\\");\\n        updateBalance(msg.sender);\\n        \\n        users[msg.sender].balance += msg.value;\\n        users[msg.sender].lastUpdateTime = block.timestamp;\\n        funds += msg.value;\\n    }\\n\\n    function withdraw(uint amount) external isRegistered {\\n        require(amount > 0, \\\"Withdrawal amount must be greater than zero\\\");\\n        require(users[msg.sender].balance >= amount, \\\"Insufficient balance\\\");\\n        \\n        updateBalance(msg.sender);\\n\\n        users[msg.sender].balance -= amount;\\n        users[msg.sender].lastUpdateTime = block.timestamp;\\n        funds -= amount;\\n\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n    }\\n\\n    function updateBalance(address user)internal{\\n        uint interest = calculateInterest(user);\\n        lastUpdate = block.timestamp;\\n        totalInterest += interest;\\n        users[user].balance += interest;\\n        users[user].lastUpdateTime = block.timestamp;\\n    }\\n\\n    function calculateInterest(address user) internal view returns(uint){\\n        uint timePassed = block.timestamp - users[user].lastUpdateTime;\\n        uint interest = (users[user].balance * interestRate * timePassed) / (365 days * 100);\\n        return interest;\\n    }\\n\\n}\",\"keccak256\":\"0xb3ad61121d1fd9006e56f59aac3cdfc82df2be3f91a5a66c5f7126638c158a89\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16,
        "contract": "src/MyToken.sol:MyToken",
        "label": "users",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(User)11_storage)"
      },
      {
        "astId": 18,
        "contract": "src/MyToken.sol:MyToken",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 20,
        "contract": "src/MyToken.sol:MyToken",
        "label": "totalInterest",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 22,
        "contract": "src/MyToken.sol:MyToken",
        "label": "lastUpdate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "src/MyToken.sol:MyToken",
        "label": "interestRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 26,
        "contract": "src/MyToken.sol:MyToken",
        "label": "investedAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 29,
        "contract": "src/MyToken.sol:MyToken",
        "label": "pool",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(PoolWithHigherInterest)1879"
      },
      {
        "astId": 588,
        "contract": "src/MyToken.sol:MyToken",
        "label": "gameOngoing",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 590,
        "contract": "src/MyToken.sol:MyToken",
        "label": "ticketPrice",
        "offset": 21,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 592,
        "contract": "src/MyToken.sol:MyToken",
        "label": "prizePercentage",
        "offset": 25,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 594,
        "contract": "src/MyToken.sol:MyToken",
        "label": "gameRound",
        "offset": 26,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 598,
        "contract": "src/MyToken.sol:MyToken",
        "label": "winningNums",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint8)6_storage"
      },
      {
        "astId": 600,
        "contract": "src/MyToken.sol:MyToken",
        "label": "playerNum",
        "offset": 0,
        "slot": "8",
        "type": "t_uint32"
      },
      {
        "astId": 603,
        "contract": "src/MyToken.sol:MyToken",
        "label": "playerList",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 606,
        "contract": "src/MyToken.sol:MyToken",
        "label": "winnerList",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 611,
        "contract": "src/MyToken.sol:MyToken",
        "label": "ticketOrders",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_struct(LotteryTicket)622_storage)"
      },
      {
        "astId": 626,
        "contract": "src/MyToken.sol:MyToken",
        "label": "balances",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)6_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[6]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(PoolWithHigherInterest)1879": {
        "encoding": "inplace",
        "label": "contract PoolWithHigherInterest",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(LotteryTicket)622_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MyToken.LotteryTicket)",
        "numberOfBytes": "32",
        "value": "t_struct(LotteryTicket)622_storage"
      },
      "t_mapping(t_address,t_struct(User)11_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MyToken.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)11_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LotteryTicket)622_storage": {
        "encoding": "inplace",
        "label": "struct MyToken.LotteryTicket",
        "members": [
          {
            "astId": 613,
            "contract": "src/MyToken.sol:MyToken",
            "label": "isValid",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 615,
            "contract": "src/MyToken.sol:MyToken",
            "label": "isClaimed",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 617,
            "contract": "src/MyToken.sol:MyToken",
            "label": "playerGameRound",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 621,
            "contract": "src/MyToken.sol:MyToken",
            "label": "playerLotteryNums",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint8)6_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)11_storage": {
        "encoding": "inplace",
        "label": "struct MyToken.User",
        "members": [
          {
            "astId": 4,
            "contract": "src/MyToken.sol:MyToken",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6,
            "contract": "src/MyToken.sol:MyToken",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8,
            "contract": "src/MyToken.sol:MyToken",
            "label": "interestRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10,
            "contract": "src/MyToken.sol:MyToken",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}